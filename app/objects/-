from pandac.PandaModules import Point3, Vec3
from panda3d.bullet import BulletCharacterControllerNode, BulletBoxShape

from ..lib.physical import Physical

class Player(Thing):
    def __init__(self, worldNP, world, loc = Point3()):
        """
        the location is the bottom-left corner of the platform
        """
        super(Player, self).__init__("player", loc = loc, rot = False, revert = False)
        
        self.node = BulletCharacterControllerNode(BulletBoxShape(Vec3(1, 2.5, 1)), 0.4, 'Player')
        self.nodePath = worldNP.attachNewNode(self.node)

        self.key = {"left": False, "right": False}

        self.direction = 0
        self.speed = 3

        self.accept("player_left_down", self.setKey, ["left", True])
        self.accept("player_left_up", self.setKey, ["left", False])
        self.accept("player_right_down", self.setKey, ["right", True])
        self.accept("player_right_up", self.setKey, ["right", False])
        self.accept("player_jump", self.jump)

        world.attachCharacter(self.node)

        self.nodePath.setPos(loc)


    def setKey(self, k, v):
        self.key[k] = v

    def move(self, task):
        if self.key["left"] and not self.key["right"]:
            self.direction = -1
        elif self.key["right"] and not self.key["left"]:
            self.direction = 1
        else:
            self.direction = 0

        self.node.setLinearMovement(Vec3(self.speed * self.direction, 0, 0), True)

        #if self.body.getLinearVel()[0] * self.direction < self.speed:
        #    self.body.addRelForce(VBase3(1000000*self.direction, 0,0))#setLinearVel(self.direction * self.speed, self.body.getLinearVel().getY(), 0)

        return task.cont

    def jump(self):
        pass#self.body.setLinearVel(self.body.getLinearVel() + VBase3(0,10,0))
